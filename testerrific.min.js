qt={collapse_skipped_groups:!0,groups:[],visible:!0,current_group:-1,running_group:-1,current_test:0,running:0,paused:0,run_start:0,run_time:0,is_manual_test:1,skip_manual_tests:0,dom_check_timeout:2e3,dom_check_interval:100,test_defaults:{running:0,time:null,result:null,skip:0,only:0,max_time:1e3,run_if:"",message:"",fn:null,before:()=>{},after:()=>{}},test_group:function(t,e={}){qt.groups.push(Object.assign({group:!0,label:t,test_count:0,collapse:!1,tests:[],skip:0,only:0,run_if:"",beforeEach:()=>{},afterEach:()=>{}},e))},duplicate_group:function(t,e,n={}){let s=qtb.find(qt.groups,{label:t}),r=qtb.clone(s);return r=Object.assign(r,n),r.label=e,qt.groups.push(r),qt.groups.length-1},test:function(t,e,n={}){"object"!=typeof e&&e||(n=e,e=t,t=null);let s=Object.assign(qtb.clone(qt.test_defaults),n,{test:e});!s.label&&t&&(s.label=t),s.label||"string"!=typeof e||(s.label=e);let r=qt.groups[qt.groups.length-1];"number"==typeof s.group?r=qt.groups[s.group]:s.group&&(r=qtb.find(qt.groups,{label:s.group})),s.position?r.tests.splice(s.position,0,s):r.tests.push(s)},run:function(t,e,n={}){"object"!=typeof e&&e||(n=e,e=t,t=null);let s=Object.assign(qtb.clone(qt.test_defaults),n,{fn:e});!s.label&&t&&(s.label=t);let r=qt.groups[qt.groups.length-1];"number"==typeof s.group?r=qt.groups[s.group]:s.group&&(r=qtb.find(qt.groups,{label:s.group})),s.position?r.tests.splice(s.position,0,s):r.tests.push(s)},wait:function(t){qt.run((()=>new Promise((function(e,n){setTimeout(e,t)}))))},pause:function(){qt.run((function(){qt.alert("Tests paused."),qt.pause_tests()}))},manual_test:function(t="",e="",n={}){"object"!=typeof e&&e||(n=e,e=t);let s=Object.assign(qtb.clone(qt.test_defaults),n,{label:t,test:"false",max_time:999999,message:e,is_manual_test:1});qt.test(t,s)},disable_skipped_tests:function(){let t=0;qt.groups.forEach((function(e){e.tests.forEach((function(n){(e.only||n.only)&&(t=1)}))})),qt.groups.forEach((function(e){let n=0,s=0;e.tests.forEach((function(r){e.skip&&(r.skip=1),r.only&&(s=1),!t||e.only||r.only||(r.skip=1),qt.skip_manual_tests&&(e.is_manual_test||r.is_manual_test)?r.skip=1:s&&(n=1)})),t&&!e.only&&(e.skip=1),qt.skip_manual_tests&&e.is_manual_test&&(e.skip=1),n&&(e.skip=0)}))},start_tests:function(t=-1){qt.groups.forEach((function(t){t.result=null,t.time=null,t.tests.forEach((function(t){t.time=null}))})),qt.running_group=t,qt.running_group>=0?(qt.current_group=qt.running_group,qt.groups[qt.current_group].tests.forEach((t=>{t.result=null}))):(qt.current_group=0,qt.groups.forEach((t=>{t.tests.forEach((e=>{t.result=null,e.result=null}))}))),qt.current_test=0,qt.running=1,qt.run_start=new Date,qt.run_time=null,qt.paused=0,qt.current_test,clearTimeout(qt.dom_check_interval_obj),qt.run_next_test()},pause_tests:function(){qt.paused=1},resume_tests:function(){qt.paused=0,qt.alert(""),qt.run_next_test()},test_start:null,dom_check_interval_obj:null,run_test:function(t,e){return new Promise((function(n,s){qt.current_group=t,qt.current_test=e;let r=qt.groups[qt.current_group],i=qt.groups[t].tests[e];i.result=null,i.time=null,i.is_manual_test?qt.is_manual_test=1:qt.is_manual_test=0,beforeEach_result=r.beforeEach(),Promise.resolve(beforeEach_result).then((function(t){before_result=i.before(),Promise.resolve(before_result).then((function(t){i.message&&qt.alert(i.message),qt.run_test_loop(qt.current_group,qt.current_test).then((function(){i.message&&qt.alert(""),after_result=i.after(),Promise.resolve(after_result).then((function(t){afterEach_result=r.afterEach(),Promise.resolve(afterEach_result).then((function(t){n()}))}))}))}))}))}))},run_test_loop:function(t,e,n=0){return new Promise((function(s,r){qt.dom_check_interval_obj=setTimeout((function(){qt.groups[qt.current_group];let r=qt.groups[qt.current_group].tests[qt.current_test];if(qt.run_start&&(qt.run_time=(new Date).getTime()-qt.run_start.getTime()),0==n&&(qt.test_start=new Date),r.wait_for_element&&new Date-qt.test_start>qt.dom_check_timeout)return r.result="error",r.error="element not found",r.time=(new Date).getTime()-qt.test_start.getTime(),void s();if(r.wait_for_element&&(!$(r.wait_for_element).is(":visible")||$(r.wait_for_element).css("opacity")<1))qt.run_test_loop(t,e,qt.dom_check_interval).then((function(){qt.running||(qt.current_test=0),s()}));else if(r.fn)result=r.fn(),Promise.resolve(result).then((function(t){r.time=(new Date).getTime()-qt.test_start.getTime(),s()}));else{let n;if(r.result)return r.time=(new Date).getTime()-qt.test_start.getTime(),void s();try{if("function"==typeof r.test){let t=r.test();if(t instanceof Promise)return console.log("has promise"),void Promise.resolve(t).then((function(t){console.log("run_test_loop resolved"),r.result=t?"passed":"failed",r.time=(new Date).getTime()-qt.test_start.getTime(),s()}));n=t}else n=qtb.seval(r.test)}catch(t){n=!1}if(!n&&r.max_time)return void((new Date).getTime()-qt.test_start.getTime()>=r.max_time?(r.result="failed",r.error="timed out",r.time=(new Date).getTime()-qt.test_start.getTime(),s()):qt.run_test_loop(t,e,qt.dom_check_interval).then((function(){qt.running||(qt.current_test=0),s()})));r.result=n?"passed":"failed",r.time=(new Date).getTime()-qt.test_start.getTime(),qt.running||(qt.current_test=0),s()}}),n)}))},pass_test:function(t=qt.current_group,e=qt.current_test){qt.is_manual_test=0,qt.groups[t].tests[e].result="passed"},fail_test:function(t=qt.current_group,e=qt.current_test){qt.is_manual_test=0,qt.groups[t].tests[e].result="failed"},skip_test:function(t=qt.current_group,e=qt.current_test){qt.is_manual_test=0,qt.groups[t].tests[e].result="skipped"},run_next_test:function(){if(qt.paused)return;let t=qt.groups[qt.current_group];if(qt.current_group>=qt.groups.length||qt.running_group>=0&&qt.current_group!=qt.running_group)return void qt.finish_tests();let e=qt.groups[qt.current_group].tests[qt.current_test];return qt.current_test>=t.tests.length?(qt.current_group=qt.current_group+1,qt.current_test=0,void qt.run_next_test()):e.skip||e.run_if&&0==qtb.seval(e.run_if)?(e.result="skipped",qt.current_test=qt.current_test+1,void qt.run_next_test()):void qt.run_test(qt.current_group,qt.current_test).then((function(){qt.current_test=qt.current_test+1,qt.run_next_test()}))},finish_tests:function(){qt.current_group=-1,qt.current_test=0,qt.run_start=0,qt.running=0,qt.alert("Tests Complete",3e3)},alert_timeout:null,alert:function(t,e=999999){$(".tests_message span").html()!=t&&(clearTimeout(qt.alert_timeout),t?$(".tests_message span").html(t).parent().addClass("visible"):$(".tests_message span").html("").parent().removeClass("visible"),qt.alert_timeout=setTimeout((function(){qt.alert("")}),e))},toggle_tests_panel(){qt.visible=!qt.visible},enable_groups(){qt.groups.forEach((t=>{t.tests.forEach((e=>{t.skip=0,e.skip=0}))}))},disable_groups(){qt.groups.forEach((t=>{t.tests.forEach((e=>{t.skip=1,e.skip=1}))}))},collapse_groups(){qt.groups.forEach((t=>{t.collapse=1}))},expand_groups(){qt.groups.forEach((t=>{t.collapse=0}))},toggle_view_group(t){qt.groups[t].collapse=!qt.groups[t].collapse},toggle_skip_group(t){let e=$('.group[group_index="'+t+'"]').find('.group_title input[type="checkbox"]').prop("checked");qt.groups[t].skip=!e,qt.groups[t].tests.forEach((function(t){t.skip=!e}))},toggle_skip_test(t,e){let n=$('.group[group_index="'+t+'"] .test[test_index="'+e+'"]').find('input[type="checkbox"]').prop("checked");console.log("val",n),n&&(qt.groups[t].skip=0),qt.groups[t].tests[e].skip=!n},totals(t="all",e=-1){let n={all:0,run:0},s=qt.groups;return e>=0&&(s=[qt.groups[e]]),s.forEach((function(t){t.tests.forEach((function(t){t.test&&(n[t.result]||(n[t.result]=0),t.group||null==t.result||n[t.result]++,null!=t.result&&n.run++,n.all++)}))})),n[t]?n[t]:0}};var qtb={init:function(t){var e=this;e.elem=document.querySelector(t.selector);var n=new Proxy(t.data,qtb.handler(this));e.template=t.template,e.debounce=null,Object.defineProperty(this,"data",{get:function(){return n},set:function(t){return n=new Proxy(t,qtb.handler(e)),debounce(e),!0}})},debounceRender:function(t){t.debounce&&window.cancelAnimationFrame(t.debounce),t.debounce=window.requestAnimationFrame((function(){t.render()}))},handler:function(t){return{get:function(e,n){return["[object Object]","[object Array]"].indexOf(Object.prototype.toString.call(e[n]))>-1?new Proxy(e[n],qtb.handler(t)):e[n]},set:function(e,n,s){return e[n]=s,qtb.debounceRender(t),!0},deleteProperty:function(e,n){return delete e[n],qtb.debounceRender(t),!0}}},matchDOMNode:function(t,e){let n=t.children(),s=e.children();if(s.length<1)e.replaceWith(t.clone());else for(let t=0;t<n.length;t++){if(n.eq(t).children().length!=s.eq(t).children().length){s.eq(t).replaceWith(n.eq(t).clone());continue}let e=n.eq(t).clone();e.find("*").remove();for(let t=0;t<e[0].attributes.length;t++)e.removeAttr(e[0].attributes[t].name);e.removeAttr("class style"),e=e.prop("outerHTML"),e=e.replace(/[\s]+/g," ");let r=s.eq(t).clone();r.find("*").remove();for(let t=0;t<r[0].attributes.length;t++)r.removeAttr(r[0].attributes[t].name);if(r=r.prop("outerHTML"),r&&(r=r.replace(/[\s]+/g," ")),e==r){for(let e=0;e<n.eq(t)[0].attributes.length;e++){let r=n.eq(t)[0].attributes[e];n.eq(t).attr(r.name)!=s.eq(t).attr(r.name)&&s.eq(t).attr(r.name,n.eq(t).attr(r.name))}n.eq(t).children().length>0&&qtb.matchDOMNode(n.eq(t),s.eq(t))}else s.eq(t).replaceWith(n.eq(t).clone())}},find(t,e){for(var n=-1,s=0;s<t.length&&!(n>=0);s++){let r=1;for(prop in e)t[s][prop]!=e[prop]&&(r=0);r&&(n=s)}return t[n]},clone(t){let e=JSON.parse(JSON.stringify(t));for(let n in t)n in e==0&&"function"==typeof t[n]&&(e[n]=t[n].bind({}));return e},print_if(t){let e="";for(let n in t)try{qtb.seval(t[n])&&(e+=n+" ")}catch(t){console.log("print_if error",e,check)}return e.trim()},seval(str){try{return eval(str)}catch(t){console.log("eval error",str)}},ms_to_s:t=>(t/1e3).toFixed(1)};qtb.init.prototype.render=function(){let t=document.createElement("div");t.innerHTML=this.template(this.data),$(t).attr("id","testerrific"),$(t).find("[\\:if]").each((function(){qtb.seval($(this).attr(":if"))||$(this).remove(),$(this).removeAttr(":if")}));["checked","disabled"].forEach((function(e){$(t).find("[\\:"+e+"]").each((function(){qtb.seval($(this).attr(":"+e))&&$(this).attr(e,1),$(this).removeAttr(":"+e)}))})),qtb.matchDOMNode($(t),$("#testerrific"))};var testerrific_ui=new qtb.init({selector:"#testerrific",data:qt,template:function(t){return`\n\t\t\n\t\t\t<div class="tests_container">\n\t\t\t\n\t\t\t<div class="tests_ui ${qtb.print_if({visible:t.visible})}">\n\t\t\t\t\n\t\t\t\t<div class="tests_message">\n\t\t\t\t\t<span></span>\n\t\t\t\t\t<div class="pass_fail_buttonss" :if="qt.is_manual_test">\n\t\t\t\t\t\t<button class="pass" onclick="qt.pass_test()">Pass</button>\n\t\t\t\t\t\t<button class="fail" onclick="qt.fail_test()">Fail</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<button :if="qt.running && qt.paused" onclick="qt.resume_tests()">▶ &nbsp;Resume</button>\n\t\t\t\t\t<button class="close" onclick="qt.alert('')"><i class="icon-close"><span>cancel</span></i></button>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<div class="panel_inner_container">\n\t\t\t\t\t\n\t\t\t\t\t<h2>Tests</h2>\n\t\t\t\t\t\n\t\t\t\t\t<div class="run_all_tests_container">\n\t\t\t\t\t\t<div :if="!qt.running">\n\t\t\t\t\t\t\t<button onclick="qt.start_tests()"> ▶ &nbsp;Run selected tests</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div :if="qt.running && !qt.paused">\n\t\t\t\t\t\t\t<button onclick="qt.pause_tests()"><span style="font-size: .7em; border-left: 4px solid #000; border-right: 4px solid #000; line-height: 1.3em;">&nbsp;</span> &nbsp;Pause</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div :if="qt.running && qt.paused">\n\t\t\t\t\t\t\t<button onclick="qt.resume_tests()">▶ &nbsp;Resume</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div :if="qt.running">\n\t\t\t\t\t\t\t<button onclick="qt.skip_test()"><span style="font-size: 1.5em; line-height: .3em;">»</span> &nbsp;Skip</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t\t<br>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t<div class="tests_summary" :if="qt.running || (qt.totals('run') && qt.totals('run') != qt.totals('skipped'))">\n\t\t\t\t\t\t<h3>Summary:</h3>\n\t\t\t\t\t\t<div class="tests_summary_table">\n\t\t\t\t\t\t\t<div :if="qt.totals('run')"><b class="run" :text="qt.totals('run')">${t.totals("run")}</b></div><div :if="qt.totals('run')"> tests run</div>\n\t\t\t\t\t\t\t<div :if="qt.totals('passed')"><b class="passed" :text="qt.totals('passed')">${t.totals("passed")}</b></div><div :if="qt.totals('passed')"> passed</div>\n\t\t\t\t\t\t\t<div :if="qt.totals('failed')"><b class="failed" :text="qt.totals('failed')">${t.totals("failed")}</b></div><div :if="qt.totals('failed')"> failed</div>\n\t\t\t\t\t\t\t<div :if="qt.totals('skipped')"><b class="skipped" :text="qt.totals('skipped')">${t.totals("skipped")}</b></div><div :if="qt.totals('skipped')"> skipped</div>\n\t\t\t\t\t\t\t<div :if="qt.totals('error')"><b class="error" :text="qt.totals('error')">${t.totals("error")}</b></div><div :if="qt.totals('error')"> errors</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t\t\t<br>\n\t\t\t\t\n\t\t\t\t\t\t<div :if="qt.run_time">Total time: <b>${qtb.ms_to_s(t.run_time)}</b> sec</div>\n\t\t\t\t\t\t<div :if="!qt.run_time && qt.paused">Paused...</div>\n\t\t\t\t\t\t<div :if="!qt.run_time && !qt.paused">Running...</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t<div class="tests_table">\n\t\t\t\t\t\t<div class="table_controls">\n\t\t\t\t\t\t\t<a onclick="qt.enable_groups()">enable all</a>\n\t\t\t\t\t\t\t<a onclick="qt.disable_groups()">disable all</a>\n\t\t\t\t\t\t\t<div>|</div>\n\t\t\t\t\t\t\t<a onclick="qt.expand_groups()">expand all</a>\n\t\t\t\t\t\t\t<a onclick="qt.collapse_groups()">collapse all</a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t${t.groups.map((function(e,n){return`\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<div class="group ${qtb.print_if({collapse:e.collapse,skipped:e.skip,running:n==t.current_group})}" group_index="${n}">\n\t\t\t\t\t\t\t\t<div class="group_title">\n\t\t\t\t\t\t\t\t\t<input type="checkbox" :checked="${!e.skip}" onchange="qt.toggle_skip_group(${n})">\n\t\t\t\t\t\t\t\t\t<p onclick="qt.toggle_view_group(${n})">${e.label}</p>\n\t\t\t\t\t\t\t\t\t<span class="collapse_group" onclick="qt.toggle_view_group(${n})"></span>\n\t\t\t\t\t\t\t\t\t<div class="group_test_summary" :if="${n} != qt.current_group && qt.totals('run', ${n})">\n\t\t\t\t\t\t\t\t\t\t<b class="passed">${t.totals("passed",n)}</b>\n\t\t\t\t\t\t\t\t\t\t<b class="failed">${t.totals("failed",n)}</b>\n\t\t\t\t\t\t\t\t\t\t<b class="skipped" :if="qt.totals('skipped', ${n})">${t.totals("skipped",n)}</b>\n\t\t\t\t\t\t\t\t\t\t<b class="error" :if="qt.totals('error', ${n})">${t.totals("error",n)}</b>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class="running_indicator" :if="${n} == qt.current_group"></div>\n\t\t\t\t\t\t\t\t\t<button onclick="qt.start_tests(${n})" :disabled="${1==t.running}">Run</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t${e.tests.map((function(s,r){return`\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<div :if="${!e.collapse}" class="test ${qtb.print_if({fn:s.fn,running:n==t.current_group&&r==t.current_test,skipped:s.skip})}" test_index="${r}" key="${r}">\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t<div v-if="test.label">\n\t\t\t\t\t\t\t\t\t\t\t<input type="checkbox" :checked="${!s.skip}" onchange="qt.toggle_skip_test(${n}, ${r})" test_index="${r}">\n\t\t\t\t\t\t\t\t\t\t\t<p><b :if="${s.fn}">Run:</b> ${s.label}</p>\n\t\t\t\t\t\t\t\t\t\t\t<div class="running_indicator" :if="${n} == qt.current_group && ${r} == qt.current_test"></div>\n\t\t\t\t\t\t\t\t\t\t\t<div :if="${null!=s.result}" class="result_container">\n\t\t\t\t\t\t\t\t\t\t\t\t<div class="result ${s.result}">${s.result}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div class="time" :if="${null!==s.time}">${s.time}ms</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<button onclick="qt.run_test(${n}, ${r}).then(qt.finish_tests)" :disabled="${1==t.running}">Run</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t`})).join(" ")}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t`})).join(" ")}\n\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t<b>${t.totals()+" Total Tests"}</b>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t\n\t\t\t\n\t\t\t<button class="toggle_tests_panel ${qtb.print_if({visible:t.visible})}" onclick="qt.toggle_tests_panel()">Tests</button>\n\t\t\t\n\t\t\t</div>\n\t\t\t\n\t`}});document.addEventListener("DOMContentLoaded",(function(){$("body").append('<div id="testerrific"></div>'),testerrific_ui.render(),qt=testerrific_ui.data}),!1);
//# sourceMappingURL=testerrific.min.js.map